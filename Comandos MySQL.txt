

	Comandos iniciais:


CREATE DATABASE bd_loja; -> Comando para criar um banco "bd_loja".

SHOW DATABASES; -> Mostra todos os bancos de dados que possui no sistema.

USE bd_loja; -> Comando para começar a usa "bd_loja".

CREATE TABLE tab_produtos(cod_produto INT, nome_produto VARCHAR(20)); -> Comando para criar a tabela "tab_produto" com os atributos "cod_produto", "nome_produto".

SHOW TABLES; -> Mostra todas as tabelas presentes no banco de dados que está em uso.

DESC tab_produtos; -> Comando para descrever "tab_produtos".

DROP TABLE tab_produtos; -> Comando para apagar "tab_produtos".

DROP DATABASE bd_loja; -> Comando para apagar "bd_loja".


------------------------------------------------------------------------------------------------------------------------------


	Comando intermediários:


INSERT INTO tab_produtos(cod_produto, nome_produto) VALUES ('1235', 'PAO DE QUEIJO'); -> Comando para inserir valores na tabela.

SELECT * FROM tab_produtos; -> Comando para verificar *(todos) os valores guardados em "tab_produtos".

CREATE TABLE tab_usuarios(user VARCHAR(15) NOT NULL, senha VARCHAR(10) NOT NULL); -> Comando para não permitir campos nulos no atributo da tabela.

CREATE TABLE tab_usuarios(user VARCHAR(15) NOT NULL, senha VARCHAR(10) NOT NULL DEFAULT 123); -> Caso a senha tente ser inserida como nula, preenche com 123 como padrão.


------------------------------------------------------------------------------------------------------------------------------


	Comando SELECT:


SELECT user, descricao FROM tb_usuarios WHERE user = 'aa' -> Comando que mostra as colunas "user" e "descricao" da tabela "tb_usuarios" que possuem "aa" na coluna "user".

SELECT * FROM tb_clientes WHERE nome = 'aa' AND//OR saldo > 800 -> Comando que mostra todas as colunas onde o nome "aa" e//ou o saldo é maior que "800".

SELECT * FROM tb_usuarios WHERE descricao IS NULL; -> Comando que mostra todos da tabela "tb_usuarios" em que a descricao seja Nula.

SELECT nome_produto FROM tb_produto WHERE preco BETWEEN 10 AND 50; -> Comando que mostra o "nome_produto" da tabela "tb_produto" em que o "preco" está entre "10 e 50". OBS.: A ordem importa, ou seja, 50 e 10 não retorna nada.

SELECT * FROM tb_usuario WHERE descricao IN ('oi', 'iae', 'HEHE'); -> O comando "IN" evita o uso de diversos "OR".


------------------------------------------------------------------------------------------------------------------------------


	Comandos DELETE, UPDATE e ALTER:


DELETE FROM tab_usuarios WHERE user = 'aa'; -> Comando para deletar todas as colunas das linhas onde "user = 'aa'".

DELETE FROM tab_usuarios; -> Comando para deletar todas as linahs da tabela.

UPDATE users SET senha = '123', descricao = 'oi' WHERE user = 'aa'; -> Comando que coloca a senha "123" e a descrição "oi" no usuario "aa".

ALTER TABLE meus_contatos ADD COLUMN id_contato INT NOT NULL AUTO_INCREMENTE FIRST, ADD PRIMARY KEY (id_contato); -> Altera a tabela "meus_contatos", adicionando uma coluna "id_contato" como inteira, não nula, com auto incremento e posicionada na frente, sendo uma chave primaria.

ALTER TABLE user ADD COLUMN email VARCHAR(50) NOT NULL AFTER id_user; -> Adiciona uma coluna "email" posicionada após a coluna "id_user".

ALTER TABLE lista_projetos CHANGE COLUMN descricaodoprojeto descricao_projeto VARCHAR(100), CHANGE COLUMN empreiteirodoprojeto nome_empresa VARCHAR(30); -> Alterou o nome de 2 colunas da tabela "listra_projetos" e modificou o tipo da variavel.


------------------------------------------------------------------------------------------------------------------------------


	Comando Aleatórios:


* -> Comando serve para retornar os valores de todas as colunas da sua tabela.

NOT NULL -> Define como não nulo.

AUTO_INCREMENT -> Faz um auto incremento na variável.

PRIMARY KEY(id_user) -> Torna id_user uma chave primária.

CONSTRAINT outra_tabela_variavel_outra_tabel FOREIGN KEY(variável_tabela) REFERENCES outra_tabela(variável_outra_tabela) -> Chave estrangeira nem um pouco simples.

CHANGE -> Altera o nome da coluna e do tipo de dado.

ORDER BY -> Mostra os resultados em ordem crescente por padrão ou podemos usar ASC ou DESC.

SUM(coluna) -> Soma os valores dessa coluna.

GROUP BY -> Agrupa a coluna.

AVG -> Média.

MIN -> Menor valor.

MAX -> Maior valor.

DISTINCT -> Evita repetir.

LIMIT 3 -> Limita em 3 o numero de resultados exibidos.

------------------------------------------------------------------------------------------------------------------------------

	Estudos:

ALTER TABLE posts DROP FOREIGN KEY fk_posts; -> Deletar um chave estrangeira.

ALTER TABLE posts DROP INDEX fk_posts; -> Deletar a Index dessa chave.

ALTER TABLE objeto ADD CONSTRAINT fk_pessoa FOREIGN KEY(id) REFERENCES pessoa (id); -> Adicionar um chave estrangeira em uma tabela ja criada.

------------------------------------------------------------------------------------------------------------------------------

	Variáveis:

Baseados em Caracteres:

- Char(n) – Trata-se de um datatype que aceita como valor qualquer dígito, sendo que o espaço ocupado no disco é de um dígito por caractere. É possível utilizar até 8 mil dígitos.

- Varchar(n) – Também aceita como valor qualquer dígito e o espaço ocupado em disco é de um dígito por caractere. Permite usar também no máximo 8 mil dígitos. A diferença pro Char, é que o Varchar geralmente é usado quando não sei o tamanho fixo de um campo.

- Text – Qualquer dígito pode ser usado neste datatype, sendo ocupado 1 byte por caractere, o equivalente a 2.147.483.647 bytes.


Baseados em Numéricos Inteiros:

- Bigint – Aceita valores entre -2^63 e 2^63-1, sendo que esse datatype ocupa 8 bytes.

- Int – Os valores aceitos aqui variam entre -2^31 a 2^31-1. Ocupa 4 bytes.

- Smallint – Aceita valores entre -32768 até 32767 e ocupa 2 bytes.

- Tinyint – Os valores aceitos aqui variam entre 0 e 255, ocupa apenas 1 byte.

- Bit – É um tipo de dado inteiro (conhecido também como booleano), cujo valor pode corresponder a NULL, 0 ou 1. Podemos converter valores de string TRUE e FALSE em valores de bit, sendo que TRUE corresponde a 1 e FALSE a 0.


Baseados em Numéricos Exatos:

- Decimal(P,S) – Os valores aceitos variam entre -10^38-1 e 10^38-1, sendo que o espaço ocupado varia de acordo com a precisão. Se a precisão for de 1 a 9, o espaço ocupado é de 5 bytes. Se a precisão é de 10 a 19, o espaço ocupado é de 9 bytes, já se a precisão for de 20 a 28, o espaço ocupado é de 13 bytes, e se a precisão for de 29 a 38, o espaço ocupado é de 17 bytes.


Baseados em Numéricos Aproximados:

- Float[(n)] – O mesmo que double precision quando o valor de n é 53, este datatype aceita valores entre -1.79E + 308 e 1.79E + 308. O espaço ocupado varia de acordo com o valor de n. Se esse valor estiver entre 1 e 24, a precisão será de 7 dígitos, sendo que o espaço ocupado será de 4 bytes. Se o valor de n estiver entre 25 e 53, sua precisão será de 15 dígitos, assim sendo o espaço ocupado será de 8 bytes.


Baseados em Valores Numéricos Monetários:
 
- Money – Este datatype aceita valores entre -2^63 e 2^63-1, sendo que 8 bytes são ocupados.

- Smallmoney – É possível usar valores entre -2^31 e 2^31-1, sendo que 4 bytes são ocupados.


- Baseados em Data e Hora:

- Datetime – Permite o uso de valores entre 1/1/1753 e 31/12/9999. Este datatype ocupa 8 bytes e sua precisão atinge 3.33 milisegundos.

- Smalldatetime – Aceita o uso de valores entre 1/1/1900 e 06/06/2079, sendo que sua precisão é de 1 minuto e ocupa 4 bytes em disco.


Baseados em Tipos de Dados Especiais:

- Uniqueidentifier – O formato hexadecimal é usado para o armazenamento de dados binários, sendo que este datatype ocupa 16 bytes.

- Timestamp – Um valor binário é gerado pelo SQL Server, sendo que esse datatype ocupa 8 bytes.

- Bit – Este datatype pode apresentar 0, 1 ou NULL, como valor, sendo ocupado 1 byte. Também utilizado como um tipo de dado int.

- Sql_Variant – Os valores aqui podem ser de qualquer datatype, sendo que é possível armazenar até 8016 bytes.

- Cursor – Datatype usado somente quando trabalhamos com variáveis.

- Table – Datatype usado somente quando trabalhamos com variáveis de memória.

- Xml – Por este datatype, podemos armazenar fragmentos de documentos XML em um banco de dados SQL. Estes fragmentos correspondem à instâncias XML que não possuem um determinado elemento de nível superior. Essas instâncias são armazenadas quando criamos variáveis e colunas com datatype XML. O espaço máximo ocupado deve ser de 2GB.
